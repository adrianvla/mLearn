const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('mLearnIPC', {
    getSettings: () => ipcRenderer.send('get-settings'),
    getFlashcards: () => ipcRenderer.send('get-flashcards'),
    getLangData: () => ipcRenderer.send('get-lang-data'),
    saveSettings: (settings) => ipcRenderer.send('save-settings', settings),
    saveFlashcards: (fc) => ipcRenderer.send('save-flashcards',fc),
    changeTrafficLights: (visibility) => ipcRenderer.send('traffic-lights', { visibility: visibility }),
    resizeWindow: (size) => ipcRenderer.send('changeWindowSize', size),
    showCtxMenu: () => ipcRenderer.send('show-ctx-menu'),
    showContact: () => ipcRenderer.send('show-contact'),
    restartApp: () => ipcRenderer.send('restart-app'),
    getVersion: () => ipcRenderer.send('get-version'),
    forceRestartApp: () => ipcRenderer.send('restart-app-force'),
    isLoaded: () => ipcRenderer.send('is-loaded'),
    isSuccess: () => ipcRenderer.send('is-successful-install'),
    installLanguage: (url) => ipcRenderer.send('install-lang', url),
    writeToClipboard: (text) => ipcRenderer.send('write-to-clipboard', text),
    promptOutput: (text) => ipcRenderer.send('prompt-output', text),
    makePiP: (size) => ipcRenderer.send('make-pip',size),
    unPiP: () => ipcRenderer.send('make-normal'),
    sendLS: (data) => ipcRenderer.send('send-ls', data),
    getLicenseType: () => ipcRenderer.send('get-license-type'),
    activateLicense: (key) => ipcRenderer.send('activate-license',key),
    isWatchingTogether: () => ipcRenderer.send('is-watching-together'),
    removeLicense: () => ipcRenderer.send('remove-license'),
    watchTogetherSend: (message) => ipcRenderer.send('watch-together-send', message),
    onSettings: (callback) => ipcRenderer.on('settings', (event, settings) => callback(settings)),
    onFlashcards: (callback) => ipcRenderer.on('flashcards-loaded', (event, settings) => callback(settings)),
    onVersionReceive: (callback) => ipcRenderer.on('version', (event, ver) => callback(ver)),
    onLangData: (callback) => ipcRenderer.on('lang-data', (event, data) => callback(data)),
    onSettingsSaved: (callback) => ipcRenderer.on('settings-saved', (event, message) => callback(message)),
    onServerLoad: (callback) => ipcRenderer.on('server-load', (event, message) => callback(message)),
    onServerStatusUpdate: (callback) => ipcRenderer.on('server-status-update', (event, message) => callback(message)),
    onServerCriticalError: (callback) => ipcRenderer.on('server-critical-error', (event, message) => callback(message)),
    onOpenSettings: (callback) => ipcRenderer.on('show-settings', (event, message) => callback(message)),
    onOpenAside: (callback) => ipcRenderer.on('show-aside', (event, message) => callback(message)),
    onContextMenuCommand: (callback) => ipcRenderer.on('ctx-menu-command', (event, message) => callback(message)),
    onLanguageInstalled: (callback) => ipcRenderer.on('lang-installed', (event, message) => callback(message)),
    onLanguageInstallError: (callback) => ipcRenderer.on('lang-install-error', (event, message) => callback(message)),
    onPythonSuccess: (callback) => ipcRenderer.on('successful-install', (event, message) => callback(message)),
    onWatchTogetherLaunch: (callback) => ipcRenderer.on('watch-together', (event, message) => callback(message)),
    onWatchTogetherRequest: (callback) => ipcRenderer.on('watch-together-request', (event, message) => callback(message)),
    onUpdatePills: (callback) => ipcRenderer.on('update-pills', (event, message) => callback(message)),
    onUpdateWordAppearance: (callback) => ipcRenderer.on('update-word-appearance', (event, message) => callback(message)),
    onUpdateAttemptFlashcardCreation: (callback) => ipcRenderer.on('update-attempt-flashcard-creation', (event, message) => callback(message)),
    onUpdateCreateFlashcard: (callback) => ipcRenderer.on('update-create-flashcard', (event, message) => callback(message)),
    onUpdateLastWatched: (callback) => ipcRenderer.on('update-last-watched', (event, message) => callback(message)),
    onLicenseGet: (callback) => ipcRenderer.on('license-type', (event, message) => callback(message)),
    onLicenseActivated: (callback) => ipcRenderer.on('license-activated', (event, message) => callback(message)),
    onNewDayFlashcards : (callback) => ipcRenderer.on('force-newday-flashcards', (event, message) => callback(message)),
    onOpenPrompt: (callback) => ipcRenderer.on('open-prompt', (event, message) => callback(message)),
    onReviewFlashcardRequest: (callback) => ipcRenderer.on('review-flashcards-request', (event, message) => callback(message)),
    onOpenWordDbEditor: (callback) => ipcRenderer.on('open-word-db-editor', (event, message) => callback(message)),
    onOpenKanjiGrid: (callback) => ipcRenderer.on('open-kanji-grid', (event, message) => callback(message)),
});